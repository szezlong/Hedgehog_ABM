to update-graph
  ifelse any? hedgehogs [
    set-current-plot "Średnia masa dorosłych jeży podczas symulacji"
    set-current-plot-pen "avg-mass"
    plot mean [mass] of hedgehogs
  ] [ plot 0 ]
end

to-report time-percent-in-env [env-type]
  let total-visits sum [visit-count] of patches
  let visits-in-env sum [visit-count] of patches with [environment-type = env-type]
  report (visits-in-env / total-visits) * 100
end

to collect-hedgehog-data
  array:set hedgehog-data 0 episode-counter
  ifelse any? hedgehogs [
    array:set hedgehog-data 1 sum [mass] of hedgehogs
    array:set hedgehog-data 2 mean [mass] of hedgehogs
    array:set hedgehog-data 3 sum [distance-traveled] of hedgehogs * 2.3
    array:set hedgehog-data 4 (ifelse-value 
      (count (hedgehogs with [sex = 0]) > 0)
      [mean ([distance-traveled] of hedgehogs with [sex = 0]) * 2.3]
      [0]
    )
    array:set hedgehog-data 5 (ifelse-value 
      (count (hedgehogs with [sex = 1]) > 0)
      [mean ([distance-traveled] of hedgehogs with [sex = 1]) * 2.3]
      [0]
    )
    array:set hedgehog-data 6 count hedgehogs with [sex = 0]
    array:set hedgehog-data 7 count hedgehogs with [sex = 1]
    array:set hedgehog-data 8 count hoglets
  ] [
    array:set hedgehog-data 1 0
    array:set hedgehog-data 2 0
    array:set hedgehog-data 3 0
    array:set hedgehog-data 4 0
    array:set hedgehog-data 5 0
    array:set hedgehog-data 6 0
    array:set hedgehog-data 7 0
    array:set hedgehog-data 8 0
  ]
  
  export-data
    (word "results/hedgehog-data_" timestamp ".csv")
    "Episode,Total Mass,Average Mass,Total Distance,Average Distance Males,Average Distance Females,Male Hedgehogs Count,Feale Hedgehogs Count,Hoglets Count "
    (word array:item hedgehog-data 0 "," array:item hedgehog-data 1 "," array:item hedgehog-data 2 "," array:item hedgehog-data 3 "," array:item hedgehog-data 4 "," array:item hedgehog-data 5 "," array:item hedgehog-data 6 "," array:item hedgehog-data 7 "," array:item hedgehog-data 8)
end

to collect-mortality-data [cause-of-death who-died]
  array:set mortality-data 0 episode-counter
  array:set mortality-data 1 current-day
  array:set mortality-data 2 current-month
  array:set mortality-data 3 current-time
  array:set mortality-data 4 sex
  array:set mortality-data 5 age
  array:set mortality-data 6 mass
  array:set mortality-data 7 (ifelse-value (
    sex = 1 and (count hoglets with [mother = self] = 0)
    ) [remaining-days] [-1]
  )
  array:set mortality-data 8 cause-of-death
  array:set mortality-data 9 who-died
  
  export-data
    (word "results/mortality-data_" timestamp ".csv")
    "Episode,Current Day,Current Month,Current Time,Sex,Age,Mass,Remaining Days,Cause of Death,Who Died"
    (word array:item mortality-data 0 "," array:item mortality-data 1 "," array:item mortality-data 2 "," array:item mortality-data 3 "," array:item mortality-data 4 "," array:item mortality-data 5 "," array:item mortality-data 6 "," array:item mortality-data 7 "," array:item mortality-data 8 "," array:item mortality-data 9)

end

to export-data [file-path head row]
  if not file-exists? file-path [
    file-open file-path
    file-print head
    file-close
  ]
  file-open file-path
  file-print row
  file-close
end

to draw-heatmap
  ask patches [
  if visit-count > 0 [
      set pcolor scale-color red visit-count 0 (
        max [visit-count] of patches
      )]
  ]
end

to draw-heatmap-with-threshold
  let sorted-patches sort-on [visit-count] patches with [visit-count > 0]
  let num-visited-patches length sorted-patches
  let threshold-index floor (num-visited-patches * 0.1)
  let visit-threshold [visit-count] of (
    item threshold-index sorted-patches
  )
  print visit-threshold
  ask patches [
    if visit-count > visit-threshold [
      set pcolor scale-color red visit-count visit-threshold (
        max [visit-count] of patches
      )
    ]
  ]
end

to draw-heatmap-with-threshold-opt
  let total-visit-counts sum [visit-count] of patches with [visit-count > 0]
  let cumulative-sum 0
  let visit-threshold 0
  let threshold-value total-visit-counts * 0.2

  ask patches with [visit-count > 0] [
    set cumulative-sum cumulative-sum + visit-count
    if cumulative-sum >= threshold-value [
      set visit-threshold visit-count
    ]
  ]

  ask patches [
    if visit-count > visit-threshold [
      set pcolor scale-color red visit-count visit-threshold (max [visit-count] of patches)
    ]
  ]
end

to draw-heatmap-opt
  let color-mapping []
  let num-colors 10
  let max-visit-count max [visit-count] of patches
  let red-shades n-values num-colors [i -> red - 5 + i]
  
  foreach (range num-colors) [ i ->
    let threshold (i + 1) * (max-visit-count / num-colors)
    set color-mapping lput (list threshold (item i red-shades)) color-mapping
  ]
  ;;ex.: [[20 10] [40 11] [60 12] [80 13] [100 14] [120 15] [140 16] [160 17] [180 18] [200 19]]
  
  ask patches with [visit-count > 0] [
    let found-color? false
    foreach color-mapping [ mapping ->
      if not found-color? [
        let threshold first mapping
        let mapped_color item 1 mapping
        if visit-count <= threshold [
          set pcolor mapped_color
          set found-color? true
        ]
      ]
    ]
  ]
  ask patches with [visit-count = 0] [
    set pcolor black
  ]
end


to restore-original-colors
  setup-world-from-image "C:/Users/bokig/OneDrive/Desktop/Julciok Hedgehog/Hedgehog_ABM-main/Hedgehog_ABM-main/setup_world/maps/map.png" 896 824;285 151
  ask hedgehogs [
    if nest != 0 [ ask nest [ set pcolor brown ] ]
  ]
end

to export-result-map
  no-display
  ask turtles [ hide-turtle ]
  ask links [ hide-link ]

  ;draw-heatmap
  ;export-view (word "results/result-map" timestamp ".png")
  ;export-legend (word "results/legend" timestamp ".csv")

  ;restore-original-colors

  ;draw-heatmap-with-threshold-opt
  draw-heatmap-opt
  export-view (word "results/result-th-map-opt" timestamp ".png")
  export-legend (word "results/legend_opt" timestamp ".csv")
  restore-original-colors 

  ask turtles [ show-turtle ]
  ask links [ show-link ]
  display
end

to export-legend [path]
  let max-visit-count max [visit-count] of patches
  file-open path
  file-print "Color,Visits,Percentage"
  ask patches with [visit-count > 0] [
    let color-value extract-rgb (scale-color red visit-count 0 max-visit-count)
    let percentage (visit-count / max-visit-count) * 100
    file-print (word color-value "," visit-count "," percentage)
  ]
  file-close
end

to check-food
   ask patches [
    (ifelse
      food >= 45 [
        set pcolor red
      ]
      food < 35 and food >= 20 [
        set pcolor turquoise
      ]
      food < 20 and food > 10 [
        set pcolor green
      ]
      food <= 10 and food > 0 [
        set pcolor lime
      ]
      food <= 0 [
        set pcolor 79
      ]
    )
  ]
end

;;;;;;;;;;;;;;;;;;;;;;;;;;;;
; Sprawdzenie wgranej mapy ;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;
to count-unique-colors
  let unique-colors []
  ask patches [
    let pcolor-value pcolor
    if not member? pcolor-value unique-colors [
      set unique-colors lput pcolor-value unique-colors
    ]
  ]
  let number-of-unique-colors length unique-colors
  print (word "Number of unique colors: " number-of-unique-colors)
end