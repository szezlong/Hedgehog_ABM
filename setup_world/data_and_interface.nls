to update-graph
  ifelse any? turtles [
    set-current-plot "Średnia masa dorosłych jeży podczas symulacji"
    set-current-plot-pen "avg-mass"
    plot mean [mass] of hedgehogs
  ] [ plot 0 ]
end

to-report time-percent-in-env [env-type]
  let total-visits sum [visit-count] of patches
  let visits-in-env sum [visit-count] of patches with [environment-type = env-type]
  report (visits-in-env / total-visits) * 100
end

to collect-hedgehog-data
  array:set hedgehog-data 0 ticks
  ifelse any? hedgehogs [
    array:set hedgehog-data 1 sum [mass] of hedgehogs
    array:set hedgehog-data 2 mean [mass] of hedgehogs
    array:set hedgehog-data 3 (sum [distance-traveled] of hedgehogs * 2.3)
    array:set hedgehog-data 4 (mean ([distance-traveled] of hedgehogs with [sex = 0]) * 2.3)
    array:set hedgehog-data 5 (mean ([distance-traveled] of hedgehogs with [sex = 1]) * 2.3)
    array:set hedgehog-data 6 count hedgehogs
  ] [
    array:set hedgehog-data 1 0
    array:set hedgehog-data 2 0
    array:set hedgehog-data 3 0
    array:set hedgehog-data 4 0
    array:set hedgehog-data 5 0
    array:set hedgehog-data 6 0
  ]
end

to export-data
  let file-path "results//hedgehog-data.csv"
  if not file-exists? file-path [
    file-open file-path
    file-print "Tick,Total Mass,Average Mass,Total Distance,Average Distance Males,Average Distance Females,Hedgehog Count"
    file-close
  ]
  file-open file-path
  file-print (word array:item hedgehog-data 0 "," array:item hedgehog-data 1 "," array:item hedgehog-data 2 "," array:item hedgehog-data 3 "," array:item hedgehog-data 4 "," array:item hedgehog-data 5 "," array:item hedgehog-data 6)
  file-close
end

to draw-heatmap
  ask patches [
  if visit-count > 0 [
        set pcolor scale-color red visit-count 0 (max [visit-count] of patches)
      ]
  ]
end

to draw-heatmap-with-threshold
  let sorted-patches sort-on [visit-count] patches with [visit-count > 0]
  let num-visited-patches length sorted-patches
  let threshold-index floor (num-visited-patches * 0.1)  ; 5% najrzadziej odwiedzanych patchy
  let visit-threshold [visit-count] of item threshold-index sorted-patches
  print visit-threshold
  ask patches [
    if visit-count > visit-threshold [
      set pcolor scale-color red visit-count visit-threshold (max [visit-count] of patches)
    ]
  ]
end


to restore-original-colors ;;to tymczasowe rozwiązanie, w przyszłości pewnie szybciej będzie wczytać mapę na nowo
  ask patches [
    set pcolor og-color
  ]
  ask hedgehogs [
    if nest != 0 [ ask nest [ set pcolor brown ] ]
  ]
end

to export-result-map
  no-display
  ask turtles [ hide-turtle ]
  ask links [ hide-link ]

  draw-heatmap
  export-view "results//result-map.png"
  export-legend

  restore-original-colors

  draw-heatmap-with-threshold
  export-view "results//result-map-2.png"
  restore-original-colors


  ask turtles [ show-turtle ]
  ask links [ show-link ]
  display
end

to export-legend
  let max-visit-count max [visit-count] of patches
  file-open "results//legend.csv"
  file-print "Color,Visits,Percentage"
  ask patches [
    if visit-count > 0 [
      let color-value scale-color red visit-count 0 max-visit-count
      let percentage (visit-count / max-visit-count) * 100
      file-print (word color-value "," visit-count "," percentage)
    ]
  ]
  file-close
end

to check-food
   ask patches [
    (ifelse
      food >= 45 [
        set pcolor red
      ]
      food < 35 and food >= 20 [
        set pcolor turquoise
      ]
      food < 20 and food > 10 [
        set pcolor green
      ]
      food <= 10 and food > 0 [
        set pcolor lime
      ]
      food <= 0 [
        set pcolor 79
      ]
    )
  ]
end

;;;;;;;;;;;;;;;;;;;;;;;;;;;;
; Sprawdzenie wgranej mapy ;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;
to count-unique-colors
  let unique-colors []
  ask patches [
    let pcolor-value pcolor
    if not member? pcolor-value unique-colors [
      set unique-colors lput pcolor-value unique-colors
    ]
  ]
  let number-of-unique-colors length unique-colors
  print (word "Number of unique colors: " number-of-unique-colors)
end