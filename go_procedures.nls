;;;;;;;;;;;;;;;;;;;;;
;;; Go procedures ;;;
;;;;;;;;;;;;;;;;;;;;;

to go
  ask turtles [
    ; if random-float 1 < 0.02 [ ;;2% szans że jednak zboczy z prostej drogi
    ;   ifelse random 2 = 0 [rt random 46 + 45] [lt random 46 + 45]
    ; ]
    
    while [not can-move? 1] [
      random-turn-turtle ;; krawędź świata
    ]
    
    move-towards-attractive-patch
    
    let direction decide-direction
    move-along-fencing direction
  ]
  tick
end 

to move-towards-attractive-patch
  let best-patch max-one-of neighbors [abundance]
  if [abundance] of best-patch > [abundance] of patch-here [
    face best-patch
  ]
end

to move-along-fencing [direction]
  while [direction != 0] [
    let closest-fence-patch patch-ahead 1 
    
    ifelse closest-fence-patch != patch-here and closest-fence-patch != nobody and direction = -2 [
      let direction-to-patch [towards myself] of closest-fence-patch
      let turtle-direction get-turtle-direction
     
      if direction = 2 [
        random-turn-turtle
      ]
      
      (ifelse
         (direction-to-patch > 315 or direction-to-patch <= 45) [
           ;; góra patcha
           ifelse turtle-direction = 3 and (direction = -2 or direction = 1) [
             set heading 270
           ] [
           ifelse direction = -1 [
             set heading 90 ;; direction=2
            ] [ 
             set heading 270
            ] 
           ]
         ]
         (direction-to-patch > 45 and direction-to-patch <= 135) [
           ;; prawy bok patcha
           ifelse turtle-direction = 2 and (direction = -2 or direction = 1)  [
             set heading 0
           ] [ 
            ifelse direction = -1 [
             set heading 180 ;; direction=3
            ] [ 
             set heading 0 
            ] 
           ]
         ]
         (direction-to-patch > 135 and direction-to-patch <= 225) [
           ;; dół patcha
           ifelse turtle-direction = 4 and (direction = -2 or direction = -1) [  
             set heading 270
           ] [
            ifelse direction = 1 [
             set heading 90 ;; direction=1
            ] [ 
             set heading 270
            ] 
           ]
         ] 
         (direction-to-patch > 225 and direction-to-patch <= 315) [
           ;; lewy bok patcha
           ifelse turtle-direction = 1 and (direction = -2 or direction = -1) [
             set heading 0
           ] [
            ifelse direction = 1 [ 
              set heading 180 ;; direction=2
            ] [  
              set heading 0
            ] 
           ] 
         ]  
       )   
    ] [
      random-turn-turtle
    ] 
    set direction decide-direction
  ] 
  fd speed
end

to-report decide-direction
  ifelse (any? patches in-cone 2 45 with [pcolor = fence])  
  or (patch-ahead 1 != nobody and [pcolor] of patch-ahead 1 = fence) 
  or (patch-ahead 2 != nobody and [pcolor] of patch-ahead 2 = fence)
  [  
    let direction search-for-gap
    report direction   
  ] [
    report 0 ;; Brak ogrodzenia na przeciwko
  ]  
end
 
to-report search-for-gap
  let right-patch patch-right-and-ahead 90 1  
  let left-patch patch-left-and-ahead 90 1
  let right-patch-far patch-right-and-ahead 90 2
  let left-patch-far patch-left-and-ahead 90 2
  
  let right-diagonal patch-right-and-ahead 30 2
  let left-diagonal patch-left-and-ahead 30 2
  let right-diagonal-far patch-right-and-ahead 30 2
  let left-diagonal-far patch-left-and-ahead 30 2
    
  if right-patch = nobody or left-patch = nobody [
    report 2 ;; na krawędzi świata
  ]
  
  ifelse [pcolor] of right-patch = fence 
  or (right-patch-far != nobody and [pcolor] of right-patch-far = fence)
  [
    ifelse [pcolor] of left-patch = fence 
    or (left-patch-far != nobody and [pcolor] of left-patch-far = fence) 
    [
      report 2 ;; Jest otoczony ogrodzeniem
    ] [
      ifelse (left-diagonal != nobody and [pcolor] of left-diagonal != fence) [
        lt 45
        report 0 
      ] [
        report -1 ;; Po lewo nie ma ogrodzenia
      ]
    ]   
  ] [ 
    ;; możesz skręcić w prawo, sprawdź czy nie pod kątem + 45
    ifelse right-diagonal != nobody and [pcolor] of right-diagonal != fence [
      rt 45
      report 0
    ] [
      ifelse [pcolor] of left-patch = fence 
        or (left-patch-far != nobody and [pcolor] of left-patch-far = fence) 
      [
        report 1 ;; luka po prawo
      ] [
        report -2 ;; nie ma ogrodzenia na boki
      ]
    ]
  ]
end

to-report get-turtle-direction
  (ifelse
    heading >= 0 and heading <= 90 [
      report 1
    ]
    heading > 90 and heading <= 180 [
      report 2
    ]
    heading > 180 and heading <= 270 [
      report 3
    ]
    heading > 270 and heading <= 360 [
      report 4
    ]
  )
end

to random-turn-turtle
  let possible-angles [0 45 90 135 180 225 270 315 360]
  set heading one-of possible-angles
end