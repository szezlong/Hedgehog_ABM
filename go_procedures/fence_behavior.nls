to move-along-fencing [direction]
  let counter 0
  while [direction != 0] [    
    let closest-fence-patch patch-ahead 1 
    
    if closest-fence-patch = patch-here [
      rt 180 
    ]
    ifelse closest-fence-patch != patch-here and closest-fence-patch != nobody and direction = -2 [
      let direction-to-patch [towards myself] of closest-fence-patch
      let hedgehog-direction get-hedgehog-direction
     
      if direction = 2 [
        random-turn-hedgehog
      ]
      
      (ifelse
         (direction-to-patch > 315 or direction-to-patch <= 45) [
           ;; góra patcha
           ifelse hedgehog-direction = 3 and (direction = -2 or direction = 1) [
             set heading 270
           ] [
           ifelse direction = -1 [
             set heading 90 ;; direction=2
            ] [ 
             set heading 270
            ] 
           ]
         ]
         (direction-to-patch > 45 and direction-to-patch <= 135) [
           ;; prawy bok patcha
           ifelse hedgehog-direction = 2 and (direction = -2 or direction = 1)  [
             set heading 0
           ] [ 
            ifelse direction = -1 [
             set heading 180 ;; direction=3
            ] [ 
             set heading 0 
            ] 
           ]
         ]
         (direction-to-patch > 135 and direction-to-patch <= 225) [
           ;; dół patcha
           ifelse hedgehog-direction = 4 and (direction = -2 or direction = -1) [  
             set heading 270
           ] [
            ifelse direction = 1 [
             set heading 90 ;; direction=1
            ] [ 
             set heading 270
            ] 
           ]
         ] 
         (direction-to-patch > 225 and direction-to-patch <= 315) [
           ;; lewy bok patcha
           ifelse hedgehog-direction = 1 and (direction = -2 or direction = -1) [
             set heading 0
           ] [
            ifelse direction = 1 [ 
              set heading 180 ;; direction=2
            ] [  
              set heading 0
            ] 
           ] 
         ]  
       )   
    ] [
      random-turn-hedgehog
    ] 
    set direction decide-direction
    
    ;;tutaj jeśli sie zapetla to zabij
    set counter counter + 1
    if counter >= 10 [
      set flags lput "die" flags
      set direction 0
    ]
    ;show direction 
  ]
end

to-report decide-direction
  ifelse (any? patches in-cone 2 90 with [member? pcolor avoided-patches])  
  or (patch-ahead 1 != nobody and member? ([pcolor] of patch-ahead 1) avoided-patches) 
  or (patch-ahead 2 != nobody and member? ([pcolor] of patch-ahead 2) avoided-patches)
  [  
    let direction search-for-gap
    report direction   
  ] [
    report 0 ;; Brak ogrodzenia na przeciwko
  ]  
end
 
to-report search-for-gap
  let right-patch patch-right-and-ahead 90 1  
  let left-patch patch-left-and-ahead 90 1
  let right-patch-far patch-right-and-ahead 90 2
  let left-patch-far patch-left-and-ahead 90 2
  
  let right-diagonal patch-right-and-ahead 30 1
  let left-diagonal patch-left-and-ahead 30 1
  let right-diagonal-far patch-right-and-ahead 30 2
  let left-diagonal-far patch-left-and-ahead 30 2
    
  if right-patch = nobody or left-patch = nobody [
    report 2 ;; na krawędzi świata
  ]

  ifelse member? ([pcolor] of right-patch) avoided-patches
  or (right-patch-far != nobody and member? ([pcolor] of right-patch-far) avoided-patches)
  [
    ifelse member? ([pcolor] of left-patch) avoided-patches
    or (left-patch-far != nobody and member? ([pcolor] of left-patch-far) avoided-patches) 
    [
      report 2 ;; Jest otoczony ogrodzeniem
    ] [ 
      ifelse (left-diagonal != nobody and member? ([pcolor] of left-diagonal) avoided-patches) [
        lt 45
        report 0 
      ] [
        report -1 ;; Po lewo nie ma ogrodzenia
      ]
    ]   
  ] [ 
    ;; możesz skręcić w prawo, sprawdź czy nie pod kątem + 45  
    ifelse right-diagonal != nobody and member? ([pcolor] of right-diagonal) avoided-patches [
      rt 45
      report 0
    ] [
      ifelse member? ([pcolor] of left-patch) avoided-patches
        or (left-patch-far != nobody and member? ([pcolor] of left-patch-far) avoided-patches) 
      [
        report 1 ;; luka po prawo
      ] [
        report -2 ;; nie ma ogrodzenia na boki
      ]
    ]
  ]
end

to-report get-hedgehog-direction
  (ifelse
    heading >= 0 and heading <= 90 [
      report 1
    ]
    heading > 90 and heading <= 180 [
      report 2
    ]
    heading > 180 and heading <= 270 [
      report 3
    ]
    heading > 270 and heading <= 360 [
      report 4
    ]
  )
end

to random-turn-hedgehog
  set heading one-of possible-angles
end