to forage
  while [not can-move? 1] [
    random-turn-hedgehog ;; krawędź świata
  ]
  
  ;;if distance-traveled < max-distance [ ;; na razie tak, w przyszłości będzie do gniazda wracać
  move-towards-food-patch
  
  if random-float 1 < 0.1 [
    random-turn-hedgehog
  ]
  
  let direction decide-direction
  move-along-fencing direction
  fd speed
  set flags lput "forage" flags
end

to eat-food
  ifelse [food] of patch-here > 0 [
    let environment-factor 1
    if [environment-type] of patch-here = "ogrod-tylny-domu-blizniaczego" [ set environment-factor 1.2 ]
    if [environment-type] of patch-here = "ogrod-frontowy-domu-blizniaczego" [ set environment-factor 1.1 ]
    if [environment-type] of patch-here = "ogrod-tylny-domu-wolnostojacego" [ set environment-factor 0.9 ]
    if [environment-type] of patch-here = "ogrod-frontowy-domu-wolnostojacego" [ set environment-factor 0.95 ]

    let available-food [food] of patch-here
    let max-gain ifelse-value (mass < low-mass-threshold) [25] [12.5]
    let gain min list (max-gain * environment-factor) available-food
    set mass mass + gain
    ask patch-here [ set food food - gain ]
    
    ifelse mass < low-mass-threshold [
      set flags lput "eat-food-big-success" flags
    ] [
      set flags lput "eat-food-success" flags
    ]
  ] [
    ifelse mass > high-mass-threshold [
      set flags lput "eat-food-big-fail" flags
    ] [ 
      set flags lput "eat-food-fail" flags
    ]
  ]
end

to move-towards-food-patch
  let accessible-patches neighbors with [pcolor != fence]
  let sorted-patches reverse sort-on [food] accessible-patches
  let best-patch get-most-food sorted-patches
  
  if (best-patch != nobody) and ([food] of best-patch > [food] of patch-here) [
    face-patch best-patch
  ]
end

to-report get-most-food [sorted-patches]
  let length_of_list length visited-patches
  let last_visited item (length_of_list - 1) visited-patches
  let second_last_visited nobody
  
  if length_of_list > 2 [ set second_last_visited item (length_of_list - 2) visited-patches ]

  foreach sorted-patches [ x ->
    if second_last_visited = nobody or (x != last_visited and x != second_last_visited) [
      report x
    ]
  ]
end