to forage
  while [not can-move? 1] [
    random-turn-hedgehog ;; krawędź świata
  ]
  ;;ifelse [food] of patch-here > 0 [
    ;;eat-food
  ;;] [
  ;;if distance-traveled < max-distance [ ;; na razie tak, w przyszłości będzie do gniazda wracać
    move-towards-food-patch
    let direction decide-direction
    move-along-fencing direction
    fd speed
  set last-action-flag "forage"
  
  ask patch-here [
    set visit-count visit-count + 1
  ]
  
  ;;show (word "Action: flag set to " last-action-flag)
    ;;set distance-traveled distance-traveled + 1
  ;;]
  ;;]
end

to eat-food
  ifelse [food] of patch-here > 0 [
    set mass mass + 1 ;; na razie +-1
    ask patch-here [ set food food - 1 ]
    set last-action-flag "eat-food-success"
  ] [
    set last-action-flag "eat-food-fail"
    ;;let reward -1 ;;kara za żerowanie gdzie nie ma jedzenia
    ;;update-q-table reward
  ]
  
  ask patch-here [
    set visit-count visit-count + 1
  ]
  
  ;;show (word "Action: " last-action-flag)
end

to move-towards-food-patch
  let accessible-patches neighbors with [pcolor != fence] ;; or neighbors4  
  let sorted-patches reverse sort-on [food] accessible-patches
  let best-patch get-most-food sorted-patches
  
  if (best-patch != nobody) and ([food] of best-patch > [food] of patch-here) [
    face-patch best-patch
    
    set second-last-target last-target
    set last-target best-patch
  ]
end

to-report get-most-food [sorted-patches]
  foreach sorted-patches [ x ->
    if last-target = nobody or (x != last-target and x != second-last-target) [
      report x
    ]
  ]
end