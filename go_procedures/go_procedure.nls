__includes ["go_procedures//fence_behavior.nls"]

to go     
  ask turtles [
    if random-float 1 < 0.02 [
     random-turn-turtle
    ] ;;2% szans że jednak zboczy z prostej drogi
    
    while [not can-move? 1] [
      random-turn-turtle ;; krawędź świata
    ]
        
    ifelse [food] of patch-here > 0 [
      eat-food
    ] [
      move-towards-food-patch
      let direction decide-direction
      move-along-fencing direction
      fd speed
    ]
  ]
  tick
end 

to eat-food
  ask patch-here [
    set food food - 1
  ]
end

to move-towards-food-patch

  let accessible-patches neighbors with [pcolor != fence] ;; or neighbors4  
  let sorted-patches reverse sort-on [food] accessible-patches
  let best-patch get-most-food sorted-patches
  
  ;print " --- "
  ;print patch-here
  ;print second-last-target
  ;print last-target
  ;print best-patch
  
  if (best-patch != nobody) and ([food] of best-patch > [food] of patch-here) [
    face-patch best-patch
    
    set second-last-target last-target
    set last-target best-patch
  ]
end

to-report get-most-food [sorted-patches]
  foreach sorted-patches [ x ->
    if last-target = nobody or (x != last-target and x != second-last-target) [
      report x
    ]
  ]
end

to face-patch [patch-to-face]
  face patch-to-face
  let angle heading
  let closest-angle first possible-angles
  let min-difference abs (closest-angle - angle)
  foreach possible-angles [ x ->
    let difference abs (x - angle)
    if difference < min-difference [
      set min-difference difference
      set closest-angle x
    ]
  ]
  set heading closest-angle
end