__includes ["go_procedures//fence_behavior.nls" "go_procedures//food_behavior.nls" "go_procedures//nest_behavior.nls"]

extensions [table]

to go
  if not isEndState [
    ask hedgehogs [
      update-state-variables
       
      if not stay-in-nest [
        let old-position patch-here ;;czemu taka nazwa niejasna?
        ifelse nest != 0 [ set distance-to-nest distance nest ] [ set distance-to-nest -1 ]
       
        check-cross-street
        
        (qlearningextension:learning)
        
        if abs (heading - last-heading) = 180 [
          set flags lput "rotated-180" flags ;;sprawdz czy tego w ogole nie wywalic
        ]
        check-stuck
        set last-heading heading
        
        ask patch-here [
          set visit-count visit-count + 1
        ]
        set distance-traveled distance-traveled + distance old-position
      ]
      
      if current-time > (night-duration * 0.8) [
        if any? patches in-radius 4 with [ self = [nest] of myself ] [
          move-to nest ;;zakładam że zdążyłby wrócić <-- chyba że dzieli go jezdnia, to powinien podjąć ryzyko przejścia przez ulicę
        ]
        set stay-in-nest true
      ]
      if current-time + 1 >= night-duration and patch-here != nest[
        if patch-here = street [
          die ;;nie zdążył wrócić
        ]
        build-new-nest
      ]
      ;show flags
      
      update-visited-patches
    ]
    set current-time current-time + 1
    tick
    ]
end

to check-cross-street ;;można by też dodać hotspoty gdzie najczęściej jeże przechodzą przez ulicę
  ask hedgehogs [
    if patch-ahead 1 != nobody and [pcolor] of patch-ahead 1 = street [
      
      ;; Warunki przejścia przez drogę:
      ;; 1. Jeż ma niską masę ciała i potrzebuje jedzenia.
      ;; 2. Jeż zdąży wrócić do gniazda.
      ;; 3. Prawdopodobieństwo ruchu samochodowego (ryzyko).
      
      if (mass < low-mass-threshold and current-time < (night-duration * 0.5)) [
        if random-float 1 > 0.1 [
          ;;powinien zwrocic flage ze chce przejsc i wtedy wywoluje sie cross-street zamiast qlearning
          cross-street ;;na razie to się bardzo rzadko zdarza w symulacji
        ]
      ]
    ]
  ]
end

to cross-street
  print "I'm crossing the street!"
  ask hedgehogs [
    if random-float 1 < 0.5 [
      die
    ] 
    let direction decide-direction
    move-along-fencing direction
    fd speed * 0.15 ;;po drodze poruszają się wolniej
  ]
end

to update-visited-patches 
  let current-patch patch-here
  set visited-patches lput current-patch visited-patches
  if length visited-patches > hedgehog-memory [
      set visited-patches but-first visited-patches
  ] 
end

to check-stuck
  let current-patch patch-here ;;czy qlearning cos da zeby tam nie szly?
  
  ifelse member? "die" flags [
    ;15% szans że utknął i zginie
    ifelse random-float 1 < 0.85 [
      let available-patches-in-radius patches in-radius 3 with [member? self available-patches]
       ifelse any? available-patches-in-radius [
        let chosen-patch one-of available-patches-in-radius
        move-to chosen-patch
        show "One found a hole and saved itself"
      ] [
        show "One got stuck and died :("
        die
      ]
    ] [
      show "One got stuck and died :("
      die
    ]
  ] [
    ifelse (not empty? visited-patches) and (current-patch = last visited-patches) [
      ifelse (heading != last-heading) [
        set stuck-count stuck-count + 1
      ] [
        set stuck-count 0
      ]
      if stuck-count > 10 [
       die
      ]
    ] [
      set stuck-count 0
    ]
  ]
end

to face-patch [patch-to-face]
  face patch-to-face
  let angle heading
  let closest-angle first possible-angles
  let min-difference abs (closest-angle - angle)
  foreach possible-angles [ x ->
    let difference abs (x - angle)
    if difference < min-difference [
      set min-difference difference
      set closest-angle x
    ]
  ]
  set heading closest-angle
end