__includes ["go_procedures//fence_behavior.nls" "go_procedures//food_behavior.nls" "go_procedures//nest_behavior.nls"]

to go   
  ifelse current-time < night-duration [
   ask turtles [
      if random-float 1 < 0.02 [
       random-turn-turtle
      ]
      while [not can-move? 1] [
        random-turn-turtle ;; krawędź świata
      ]
          
      ifelse [food] of patch-here > 0 [
        eat-food
      ] [
        ;;if distance-traveled < max-distance [ ;; na razie tak, w przyszłości będzie do gniazda wracać
          move-towards-food-patch
          let direction decide-direction
          move-along-fencing direction
          fd speed
          ;;set distance-traveled distance-traveled + 1
        ;;]
      ]
    ]
    set current-time current-time + 1
    tick
  ] [
    stop
  ]
end 

to next-night
  while [current-time < night-duration] [
    go
  ]
  set current-time 0
  ask turtles [
    face-patch nest
    set distance-traveled 0
  ]
  reset-ticks
end

to face-patch [patch-to-face]
  face patch-to-face
  let angle heading
  let closest-angle first possible-angles
  let min-difference abs (closest-angle - angle)
  foreach possible-angles [ x ->
    let difference abs (x - angle)
    if difference < min-difference [
      set min-difference difference
      set closest-angle x
    ]
  ]
  set heading closest-angle
end