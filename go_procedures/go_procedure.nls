__includes ["go_procedures//fence_behavior.nls" "go_procedures//food_behavior.nls" "go_procedures//nest_behavior.nls" "go_procedures//mating_behavior.nls"]

extensions [table]

to go
  if not isEndState [
    if not hibernating [
        ask hedgehogs [
        update-state-variables       
        if not stay-in-nest [
          while [not can-move? 1] [
            random-turn-hedgehog ;; krawędź świata
          ]
          
          let old-position patch-here
         
          if current-month >= 3 and current-month <= 8 [
            if sex = 0 and remaining-days = 0 [
              reproduce
            ]
          ]
          check-cross-street
          
          (qlearningextension:learning)
          
          if abs (heading - last-heading) = 180 [
            set flags lput "rotated-180" flags
          ]
          check-stuck
          set last-heading heading
          
          ask patch-here [
            set visit-count visit-count + 1
          ]
          set distance-traveled distance-traveled + distance old-position
        ]
        check-return-nest
        update-visited-patches
      ]
      
      ask hoglets [
        if mother != nobody [
          let mothers-nest [nest] of mother
          if mothers-nest != nobody and nest != mothers-nest [
            set nest mothers-nest
            move-to nest
          ]
        ]
      ]
    ]
    set current-time current-time + 1
    tick
  ]
end

to check-return-nest
    if current-time > (night-duration * 0.8) [
    if any? patches in-radius 4 with [ self = [nest] of myself ] [
      set distance-traveled distance-traveled + distance nest
      move-to nest ;;zakładam że zdążyłby wrócić
    ]
    set stay-in-nest true
  ]
  if current-time + 1 >= night-duration and patch-here != nest[
    if patch-here = street [
      let cause "didn't reach the nest"
      collect-mortality-data cause who
      kill-hedgehog
    ]
    build-new-nest
  ]
end

to check-cross-street
  ask hedgehogs [
    if patch-ahead 1 != nobody and [pcolor] of patch-ahead 1 = street [      
      if (mass < low-mass-threshold and current-time < (night-duration * 0.5)) [
        if random-float 1 > 0.1 [
          cross-street
        ]
      ]
    ]
  ]
end

to cross-street
  if random-float 1 < 0.5 [
    let cause "roadkill"
    collect-mortality-data cause who
    kill-hedgehog
  ] 
  let direction decide-direction
  move-along-fencing direction
  fd speed * 0.6 ;;po drodze poruszają się wolniej
end

to update-visited-patches 
  let current-patch patch-here
  set visited-patches lput current-patch visited-patches
  if length visited-patches > hedgehog-memory [
      set visited-patches but-first visited-patches
  ] 
end

to check-stuck
  let current-patch patch-here
  
  if member? "die" flags [
    ;5% szans że utknął i zginie
    ifelse random-float 1 < 0.95 [
      let available-patches-in-radius patches in-radius 3 with [member? self available-patches]
       ifelse any? available-patches-in-radius [
        let chosen-patch one-of available-patches-in-radius
        set distance-traveled distance-traveled + distance chosen-patch
        move-to chosen-patch
      ] [
        let cause "stuck in fencing"
        collect-mortality-data cause who
        kill-hedgehog
      ]
    ] [
      let cause "stuck in fencing"
      collect-mortality-data cause who
      kill-hedgehog
      ;;die
    ]
  ]
end

to face-patch [patch-to-face]
  face patch-to-face
  let angle heading
  let closest-angle first possible-angles
  let min-difference abs (closest-angle - angle)
  foreach possible-angles [ x ->
    let difference abs (x - angle)
    if difference < min-difference [
      set min-difference difference
      set closest-angle x
    ]
  ]
  set heading closest-angle
end